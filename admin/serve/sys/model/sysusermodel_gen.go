// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZebblogSysUserIdPrefix = "cache:zebblog:sysUser:id:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*SysUser, error)
		FindUser(username string, password string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, id string) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		Id         string         `db:"id"`
		Username   sql.NullString `db:"username"`
		Realname   sql.NullString `db:"realname"`
		Password   sql.NullString `db:"password"`
		Avatar     sql.NullString `db:"avatar"`
		Sex        sql.NullInt64  `db:"sex"`
		Email      sql.NullString `db:"email"`
		Phone      sql.NullString `db:"phone"`
		Salt       sql.NullString `db:"salt"`
		UpdateBy   sql.NullInt64  `db:"update_by"`
		UpdateTime sql.NullTime   `db:"update_time"`
		CreateBy   sql.NullString `db:"create_by"`
		CreateTime sql.NullTime   `db:"create_time"`
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, id string) error {
	zebblogSysUserIdKey := fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zebblogSysUserIdKey)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id string) (*SysUser, error) {
	zebblogSysUserIdKey := fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, id)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, zebblogSysUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindUser 根据用户名和密码查询用户
func (m *defaultSysUserModel) FindUser(username string, password string) (*SysUser, error) {
	zebblogSysUserIdKey := fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, username)
	var resp SysUser
	err := m.QueryRowIndex(&resp, zebblogSysUserIdKey, m.formatPrimary, func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where username = ? and password = ? limit 1", sysUserRows, m.table)
		if err := conn.QueryRow(&resp, query, username, password); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	zebblogSysUserIdKey := fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Username, data.Realname, data.Password, data.Avatar, data.Sex, data.Email, data.Phone, data.Salt, data.UpdateBy, data.CreateBy)
	}, zebblogSysUserIdKey)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, data *SysUser) error {
	zebblogSysUserIdKey := fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Realname, data.Password, data.Avatar, data.Sex, data.Email, data.Phone, data.Salt, data.UpdateBy, data.CreateBy, data.Id)
	}, zebblogSysUserIdKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZebblogSysUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRow(v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
